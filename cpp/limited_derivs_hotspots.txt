Source Line  Source                                                                           CPU Time  Spin Time  Overhead Time
-----------  -------------------------------------------------------------------------------  --------  ---------  -------------
155              std::vector<vec> gy_;           // y differences of g                                                          
156              std::vector<vec> v_;            // Solution values at next step                                                
157                                                                                                                             
158              // Array accessor functions                                                                                    
159                                                                                                                             
160              int offset(int ix, int iy) const { return iy*nx_all+ix; }                                                      
161                                                                                                                             
162              vec& u(int ix, int iy)    { return u_[offset(ix,iy)]; }                                                        
163              vec& v(int ix, int iy)    { return v_[offset(ix,iy)]; }                                                        
164              vec& f(int ix, int iy)    { return f_[offset(ix,iy)]; }                                                        
165              vec& g(int ix, int iy)    { return g_[offset(ix,iy)]; }                                                        
166                                                                                                                             
167              vec& ux(int ix, int iy)   { return ux_[offset(ix,iy)]; }                                                       
168              vec& uy(int ix, int iy)   { return uy_[offset(ix,iy)]; }                                                       
169              vec& fx(int ix, int iy)   { return fx_[offset(ix,iy)]; }                                                       
170              vec& gy(int ix, int iy)   { return gy_[offset(ix,iy)]; }                                                       
171                                                                                                                             
172              // Wrapped accessor (periodic BC)                                                                              
173              int ioffset(int ix, int iy) {                                                                                  
174                  return offset( (ix+nx-nghost) % nx + nghost,                                                               
175                                 (iy+ny-nghost) % ny + nghost );                                                             
176              }                                                                                                              
177                                                                                                                             
178              vec& uwrap(int ix, int iy)  { return u_[ioffset(ix,iy)]; }                                                     
179                                                                                                                             
180              // Apply limiter to all components in a vector                                                                 
181              static void limdiff(vec& du, const vec& um, const vec& u0, const vec& up) {                                    
182                  for (int m = 0; m < du.size(); ++m)                                                                        
183                      du[m] = Limiter::limdiff(um[m], u0[m], up[m]);                         0.220s         0s             0s
184              }                                                                                                              
185                                                                                                                             
186              // Stages of the main algorithm                                                                                
187              void apply_periodic();                                                                                         
188              void compute_fg_speeds(real& cx, real& cy);                                                                    
189              void limited_derivs();                                                                                         
190              void compute_step(int io, real dt);                                                                            
191                                                                                                                             
192          };                                                                                                                 
193                                                                                                                             

279          /**                                                                                                                
280           * ### Derivatives with limiters                                                                                   
281           *                                                                                                                 
282           * In order to advance the time step, we also need to estimate                                                     
283           * derivatives of the fluxes and the solution values at each cell.                                                 
284           * In order to maintain stability, we apply a limiter here.                                                        
285           */                                                                                                                
286                                                                                                                             
287          template <class Physics, class Limiter>                                                                            
288          void Central2D<Physics, Limiter>::limited_derivs()                                                                 
289          {                                                                                                                  
290              for (int iy = 1; iy < ny_all-1; ++iy)                                                                          
291                  for (int ix = 1; ix < nx_all-1; ++ix) {                                    0.006s         0s             0s
292                                                                                                                             
293                      // x derivs                                                                                            
294                      limdiff( ux(ix,iy), u(ix-1,iy), u(ix,iy), u(ix+1,iy) );                                                
295                      limdiff( fx(ix,iy), f(ix-1,iy), f(ix,iy), f(ix+1,iy) );                                                
296                                                                                                                             
297                      // y derivs                                                                                            
298                      limdiff( uy(ix,iy), u(ix,iy-1), u(ix,iy), u(ix,iy+1) );                                                
299                      limdiff( gy(ix,iy), g(ix,iy-1), g(ix,iy), g(ix,iy+1) );                                                
300                  }                                                                                                          
301          }                                                                                                                  
